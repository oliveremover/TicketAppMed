@page "/equipments/{EquipmentNumber:int}"
@rendermode InteractiveServer
@using BlazorApp1.Components.Equipment
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject EquipmentService EquipmentService
@inject NavigationManager NavigationManager
@inject ILogger<EquipmentDetail> Logger

<PageTitle>Equipment Details - @EquipmentNumber</PageTitle>

<h3>Equipment Details</h3>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (equipment == null)
{
    <div class="alert alert-warning">
        Equipment not found or an error occurred while loading.
    </div>
}
else
{
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Equipment #@equipment.EquipmentNumber</span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Device Type</dt>
                        <dd class="col-sm-8">@equipment.DeviceType</dd>

                        <dt class="col-sm-4">Brand</dt>
                        <dd class="col-sm-8">@equipment.Brand</dd>

                        <dt class="col-sm-4">Model</dt>
                        <dd class="col-sm-8">@equipment.Model</dd>

                        <dt class="col-sm-4">Serial Number</dt>
                        <dd class="col-sm-8">@equipment.SerialNumber</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Alt ID</dt>
                        <dd class="col-sm-8">@equipment.AltID</dd>

                        <dt class="col-sm-4">Code</dt>
                        <dd class="col-sm-8">@equipment.Code</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>


    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="GoBack">Back to List</button>
    </div>
}

@code {
    [Parameter]
    public int EquipmentNumber { get; set; }

    private Equipment? equipment;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            equipment = await EquipmentService.GetEquipmentByNumberAsync(EquipmentNumber);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading equipment {EquipmentNumber}", EquipmentNumber);
            equipment = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/equipments");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "operational" => "bg-success",
            "maintenance" => "bg-warning",
            "broken" => "bg-danger",
            "retired" => "bg-secondary",
            _ => "bg-info"
        };
    }

    private string GetTicketStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "bg-danger",
            "in progress" => "bg-warning",
            "resolved" => "bg-success",
            "closed" => "bg-secondary",
            _ => "bg-info"
        };
    }
}