@inject NavigationManager Navigation
@inject IEquipmentService EquipmentService
@using BlazorApp1.Models
@using BlazorApp1.Services
@rendermode InteractiveServer

<CascadingValue Value="Model">
    <div class="wizard-container">
        <div class="sticky-header-group">
            <div>
                <div class="d-flex align-items-center justify-content-between border-bottom py-2 px-2">
                    @if (Step != 1)
                    {
                    <button type="button" class="btn px-2 m-2" aria-label="Back" @onclick="Prev">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    }
                    <div class="flex-grow-1 text-center">
                        <span class="fw-medium fs-4">Ny sak</span>
                    </div>
                    <button type="button" class="btn px-2 m-2" aria-label="Close" @onclick="@(()=>Navigation.NavigateTo("/tickets"))">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="content-area">

            @if (Step == 1)
            {
                <WizardStep1 OnCategorySelected="Next" />
            }
            else if (Step == 2)
            {
                <WizardStep2 />
            }
            else if (Step == 3)
            {
                <WizardStep3 />
            }
            <div class="action-buttons">
                @if (Step == 3)
                {
                    <Btn OnClick="CreateTicket" Style="primary" Text="Create Ticket" />
                }
                @if (Step < 3 && Step != 1)
                {
                    <Btn IconClass="" Style="primary" Text="Next" OnClick="Next" />
                }
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    private WizardModel Model { get; set; } = new WizardModel();
    
    public int Step { get; set; } = 1;

    private void Next()
    {
        Step++;
        StateHasChanged();
    }

    private void Prev()
    {
        Step--;
        StateHasChanged();
    }

    private void CloseWizard()
    {
        // Navigate back to the previous page
        Navigation.NavigateTo("/tickets");
    }
    private void CreateTicket()
    {
        // Create new ticket with the wizard data
        var newTicket = new Ticket
        {
            Category = Model.Category ?? "Uncategorized",
            Header = Model.Header ?? "New Ticket",
            Details = Model.Details ?? "",
            EquipmentNumber = Model.EquipmentNumber,
            Date = DateTime.Now,
            Status = TicketStatus.Open
        };

        // Use your TicketService to create the ticket
        // await TicketService.CreateTicketAsync(newTicket);
        
        // Navigate back to the tickets list
        Navigation.NavigateTo("/tickets");
    }
}