@inject NavigationManager Navigation
@inject IEquipmentService EquipmentService
@using BlazorApp1.Models
@using BlazorApp1.Services
@using Microsoft.AspNetCore.WebUtilities
@rendermode InteractiveServer

<CascadingValue Value="Model">
    <div class="wizard-container">
        <div class="sticky-header-group">
            <div>
                <div class="d-flex align-items-center justify-content-between border-bottom py-2 px-2">
                    @if (Step != 1)
                    {
                    <button type="button" class="btn px-2 m-2" aria-label="Back" @onclick="Prev">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    }
                    <div class="flex-grow-1 text-center">
                        <span class="fw-medium fs-4">Ny sak</span>
                    </div>
                    <button type="button" class="btn px-2 m-2" aria-label="Close" @onclick="@(()=>Navigation.NavigateTo("/tickets"))">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="content-area">
            @if (Step == 1)
            {
                <WizardStep1 OnCategorySelected="Next" />
            }
            else if (Step == 2)
            {
                <WizardStep2 />
            }
            else if (Step == 3)
            {
                <WizardStep3 />
            }
            <div class="action-buttons">
                @if (Step == 3)
                {
                    <Btn OnClick="CreateTicket" Style="primary" Text="Create Ticket" />
                }
                @if (Step < 3 && Step != 1)
                {
                    <Btn IconClass="" Style="primary" Text="Next" OnClick="Next" />
                }
            </div>
        </div>
        
        @if (hasPreselectedEquipment && Step == 1)
        {
            <div class="preselected-equipment-banner">
                <div class="preselected-content">
                    <i class="bi bi-hdd me-2"></i>
                    <span>Equipment pre-selected: @preselectedEquipmentName</span>
                </div>
            </div>
        }
    </div>
</CascadingValue>

@code {
    private WizardModel Model { get; set; } = new WizardModel();
    private bool hasPreselectedEquipment = false;
    private string preselectedEquipmentName = "";
    
    public int Step { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        // Parse the URL to check for equipment ID
        var uri = new Uri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        
        if (queryParams.TryGetValue("equipmentId", out var equipmentIdValue) && 
            int.TryParse(equipmentIdValue, out int equipmentId))
        {
            // Get the equipment
            var equipment = await EquipmentService.GetEquipmentByNumberAsync(equipmentId);
            if (equipment != null)
            {
                // Pre-populate the wizard model with equipment data
                Model.EquipmentNumber = equipment.EquipmentNumber;
                Model.Equipment = $"{equipment.DeviceType} {equipment.Brand} {equipment.Model}";
                
                hasPreselectedEquipment = true;
                preselectedEquipmentName = $"{equipment.EquipmentNumber}: {equipment.DeviceType} - {equipment.Brand} {equipment.Model}";
                
                // Keep step 1 as starting point
                Step = 1;
            }
        }
    }

    private void Next()
    {
        Step++;
        StateHasChanged();
    }

    private void Prev()
    {
        Step--;
        StateHasChanged();
    }

    private void CreateTicket()
    {
        // Create new ticket with the wizard data
        var newTicket = new Ticket
        {
            Category = Model.Category ?? "Uncategorized",
            Header = Model.Header ?? "New Ticket",
            Details = Model.Details ?? "",
            EquipmentNumber = Model.EquipmentNumber,
            Date = DateTime.Now,
            Status = TicketStatus.Open
        };

        // Navigate back to the tickets list
        Navigation.NavigateTo("/tickets");
    }
}