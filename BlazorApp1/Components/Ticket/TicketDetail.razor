@page "/tickets/{Id:int}"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ITicketService TicketService
@using BlazorApp1.Components.StatusBadge
@using BlazorApp1.Models
@using BlazorApp1.Services

<PageTitle>Ticket Details</PageTitle>

<div class="ticket-detail-container">
    <!-- Back button header -->
    <div class="ticket-header">
        <button aria-label="Navigate back" class="back-button" @onclick="NavigateBack">
            <i class="bi bi-arrow-left"></i>
        </button>
        <h3 class="mb-0">Ticket Details</h3>
    </div>

    @if (ticket == null)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Ticket info card -->
        <div class="ticket-card">
            <!-- Status and ID section -->
            <div class="ticket-card-header">
                <div class="ticket-id">@ticket.GetFormattedID()</div>
                <StatusBadge Status="@( (TicketStatus)ticket.Status )" />
            </div>
            
            <!-- Title section -->
            <h2 class="ticket-title">@ticket.Header</h2>
            
            <!-- Metadata section -->
            <div class="ticket-metadata">
                <div class="metadata-item">
                    <i class="bi bi-calendar3"></i>
                    <span>@ticket.Date.ToString("MMM d, yyyy")</span>
                </div>
                <div class="metadata-item">
                    <i class="bi bi-tag"></i>
                    <span>@ticket.Category</span>
                </div>
                @if (!string.IsNullOrEmpty(ticket.AssignedTo))
                {
                    <div class="metadata-item">
                        <i class="bi bi-person"></i>
                        <span>@ticket.AssignedTo</span>
                    </div>
                }
            </div>
            
            <!-- Sections with consistent styling -->
            <div class="content-section">
                <h4 class="section-title">
                    <i class="bi bi-info-circle me-2"></i>Details
                </h4>
                <div class="content-body">
                    <p class="ticket-description">@ticket.Details</p>
                </div>
            </div>
            
            <!-- Attachments section -->
            <div class="content-section">
                <h4 class="section-title">
                    <i class="bi bi-paperclip me-2"></i>Attachments
                </h4>
                <div class="content-body">
                    @if (ticket.Attachments.Any())
                    {
                        <div class="attachments-list">
                            @foreach (var attachment in ticket.Attachments)
                            {
                                <div class="attachment-item">
                                    <i class="bi bi-file-earmark"></i>
                                    <span class="file-name">@attachment.FileName</span>
                                    <span class="file-size">@FormatFileSize(attachment.FileSize)</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="bi bi-files large-icon"></i>
                            <p>No attachments yet</p>
                            <button class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-plus-lg me-1"></i>Add attachment
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Conversation section -->
            <div class="content-section">
                <h4 class="section-title">
                    <i class="bi bi-chat-left-text me-2"></i>Conversation
                </h4>
                <div class="content-body">
                    <div class="conversation-container">
                        @if (ticket.Comments.Any())
                        {
                            <div class="comments-list">
                                @foreach (var comment in ticket.Comments.OrderBy(c => c.Date))
                                {
                                    <div class="comment-item">
                                        <div class="comment-header">
                                            <span class="comment-author">@comment.Author</span>
                                            <span class="comment-time">@GetRelativeTime(comment.Date)</span>
                                        </div>
                                        <div class="comment-text">@comment.Text</div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-chat large-icon"></i>
                                <p>No messages yet</p>
                            </div>
                        }
                        <div class="comment-input mt-3">
                            <textarea class="form-control" rows="2" placeholder="Type your message here..." @bind="newComment"></textarea>
                            <div class="d-flex justify-content-end mt-2">
                                <button class="btn btn-primary" @onclick="AddComment">
                                    <i class="bi bi-send me-1"></i>Send
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Action buttons -->
        <div class="action-buttons">
            <div class="action-buttons-left">
                <button class="btn btn-danger" @onclick="@(() => ShowDeleteConfirmation = true)">
                    <i class="bi bi-trash me-2"></i>Delete
                </button>
            </div>
            <div class="action-buttons-right">
                <button class="btn btn-outline-secondary" @onclick="OpenStatusModal">
                    <i class="bi bi-arrow-repeat me-2"></i>Update Status
                </button>
                <button class="btn btn-primary" @onclick="EditTicket">
                    <i class="bi bi-pencil me-2"></i>Edit
                </button>
            </div>
        </div>

        @if (ShowDeleteConfirmation)
        {
            <div class="modal-backdrop show"></div>
            <div class="modal d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Delete Confirmation</h5>
                            <button type="button" class="btn-close" @onclick="@(() => ShowDeleteConfirmation = false)" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this ticket? This action cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="@(() => ShowDeleteConfirmation = false)">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="DeleteTicket">Delete Ticket</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private Ticket? ticket;
    private bool ShowDeleteConfirmation { get; set; } = false;
    private string newComment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ticket = await TicketService.GetTicketByIdAsync(Id);
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/tickets");
    }
    
    private void EditTicket()
    {
        // Will implement edit functionality later
        Navigation.NavigateTo($"/editticket/{ticket?.ID}");
    }
    
    private void OpenStatusModal()
    {
        // Will implement status update functionality later
    }
    
    private async Task DeleteTicket()
    {
        if (ticket != null)
        {
            await TicketService.DeleteTicketAsync(ticket.ID);
            ShowDeleteConfirmation = false;
            Navigation.NavigateTo("/tickets");
        }
    }
    
    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newComment) || ticket == null)
            return;
            
        var comment = new Comment
        {
            ID = ticket.Comments.Count > 0 ? ticket.Comments.Max(c => c.ID) + 1 : 1,
            Text = newComment,
            Date = DateTime.Now,
            Author = "current.user@example.com"  // In a real app, get from authentication
        };
        
        ticket.Comments.Add(comment);
        
        // In a real app, you would save this to the backend
        await TicketService.UpdateTicketAsync(ticket);
        
        newComment = string.Empty;  // Clear the input
    }
    
    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.TotalDays > 1)
            return date.ToString("MMM d, h:mm tt");
        else if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        else if (timeSpan.TotalMinutes > 1)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        else
            return "just now";
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        
        return $"{size:0.##} {sizes[order]}";
    }
}