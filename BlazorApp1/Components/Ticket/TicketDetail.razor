@page "/tickets/{Id:int}"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ITicketService TicketService
@inject IEquipmentService EquipmentService
@using BlazorApp1.Components.StatusBadge
@using BlazorApp1.Components.Equipment
@using BlazorApp1.Models
@using BlazorApp1.Services

<PageTitle>Ticket Details</PageTitle>

<Header 
    Title="Ticket Details" 
    ShowBackButton=true
    BackUrl="/tickets"
    CenterTitle=true>
</Header>

<div class="ticket-detail-container">
    @if (ticket == null)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Ticket info card with mobile-first design -->
        <div class="ticket-card @(isCommentFocused ? "comment-focused" : "")">
            <!-- Status and ID section -->
            <div class="ticket-card-header">
                <div class="ticket-id">@ticket.GetFormattedID()</div>
                <StatusBadge Status="@( (TicketStatus)ticket.Status )" />
            </div>
            
            <!-- Title section -->
            <h2 class="ticket-title">@ticket.Header</h2>
            
            <!-- Metadata section -->
            <div class="ticket-metadata">
                <div class="metadata-item">
                    <i class="bi bi-calendar3"></i>
                    <span>@ticket.Date.ToString("MMM d, yyyy")</span>
                </div>
                <div class="metadata-item">
                    <i class="bi bi-tag"></i>
                    <span>@ticket.Category</span>
                </div>
            </div>
            
            <!-- Equipment section with compact empty state -->
            <div class="content-section">
                <h4 class="section-title">
                    <i class="bi bi-tools me-2"></i>Equipment
                </h4>
                <div class="content-body">
                    @if (ticket.Equipment != null)
                    {
                        <EquipmentComp Equipment="ticket.Equipment" OnRemove="RemoveEquipment" TicketId="ticket.ID"/>
                    }
                    else
                    {
                        <div class="compact-empty-state">
                            <button class="btn btn-sm btn-link text-decoration-none" @onclick="OpenEquipmentModal">
                                <i class="bi bi-plus-circle me-1"></i>Add equipment
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Sections with consistent styling -->
            <div class="content-section">
                <h4 class="section-title">
                    <i class="bi bi-info-circle me-2"></i>Details
                </h4>
                <div class="content-body">
                    <p class="ticket-description">@ticket.Details</p>
                </div>
            </div>
            
            <!-- Attachments section with compact empty state -->
            <div class="content-section">
                <h4 class="section-title">
                    <i class="bi bi-paperclip me-2"></i>Attachments
                </h4>
                <div class="content-body">
                    @if (ticket.Attachments.Any())
                    {
                        <div class="attachments-list">
                            @foreach (var attachment in ticket.Attachments)
                            {
                                <div class="attachment-item">
                                    <i class="bi bi-file-earmark"></i>
                                    <span class="file-name">@attachment.FileName</span>
                                    <span class="file-size">@FormatFileSize(attachment.FileSize)</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="compact-empty-state">
                            <button class="btn btn-sm btn-link text-decoration-none">
                                <i class="bi bi-plus-circle me-1"></i>Add attachment
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Conversation section with mobile-first design -->
            <div class="content-section conversation-section">
                <h4 class="section-title">
                    <i class="bi bi-chat-left-text me-2"></i>Conversation
                </h4>
                <div class="content-body">
                    <div class="conversation-container">
                        @if (ticket.Comments.Any())
                        {
                            <div class="comments-list">
                                @foreach (var comment in ticket.Comments.OrderBy(c => c.Date))
                                {
                                    <div id="comment-@comment.ID" class="comment-item @(IsCurrentUser(comment.Author) ? "comment-mine" : "")">
                                        <div class="comment-avatar">
                                            @if (IsCurrentUser(comment.Author))
                                            {
                                                <div class="avatar-circle self">
                                                    <span>@GetInitials(comment.Author)</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="avatar-circle">
                                                    <span>@GetInitials(comment.Author)</span>
                                                </div>
                                            }
                                        </div>
                                        <div class="comment-content">
                                            <div class="comment-header">
                                                <span class="comment-author">@FormatAuthorName(comment.Author)</span>
                                                <span class="comment-time">
                                                    <i class="bi bi-clock me-1"></i>
                                                    @GetRelativeTime(comment.Date)
                                                </span>
                                            </div>
                                            <div class="comment-bubble">
                                                @comment.Text
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-chat large-icon"></i>
                                <p>No messages yet</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Fixed mobile-friendly comment input -->
            <div class="comment-input-container @(isCommentFocused ? "expanded" : "")">
                <div class="comment-input">
                    <textarea class="form-control" 
                              placeholder="Type your message..." 
                              rows="1"
                              @bind="newComment" 
                              @onfocus="() => isCommentFocused = true"
                              @onblur="() => isCommentFocused = false"
                              @ref="commentTextArea"></textarea>
                    <button class="btn-send @(string.IsNullOrWhiteSpace(newComment) ? "disabled" : "")" 
                            @onclick="AddComment"
                            disabled="@(string.IsNullOrWhiteSpace(newComment))">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Floating action button for mobile -->
        <div class="fab-container">
            <button class="fab fab-main" @onclick="() => showActionMenu = !showActionMenu">
                <i class="bi bi-three-dots"></i>
            </button>
            
            @if (showActionMenu)
            {
                <div class="fab-menu">
                    <button class="fab fab-item" @onclick="EditTicket">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="fab fab-item" @onclick="OpenStatusModal">
                        <i class="bi bi-arrow-repeat"></i>
                    </button>
                    <button class="fab fab-item fab-danger" @onclick="@(() => ShowDeleteConfirmation = true)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            }
        </div>

        <!-- Equipment selection modal with improved mobile layout -->
        @if (showEquipmentModal)
        {
            <div class="modal-backdrop show"></div>
            <div class="modal d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg">
                    <div class="modal-content mobile-modal-content">
                        <div class="modal-header py-2">
                            <h5 class="modal-title">
                                <i class="bi bi-tools me-2"></i>Select Equipment
                            </h5>
                            <button type="button" class="btn-close" @onclick="CloseEquipmentModal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body p-2 p-sm-3">
                            <div class="search-container mb-2 mb-sm-3">
                                <label for="equipmentSearch" class="form-label visually-hidden">Search equipment</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light border-end-0">
                                        <i class="bi bi-search text-muted"></i>
                                    </span>
                                    <input type="text" 
                                           class="form-control border-start-0" 
                                           id="equipmentSearch"
                                           placeholder="Search by name, serial number, or model..." 
                                           @bind-value="equipmentSearchTerm" 
                                           @bind-value:event="oninput" 
                                           @onkeyup="SearchEquipment"
                                           @ref="searchInput"
                                           autocomplete="off" />
                                @if (!string.IsNullOrEmpty(equipmentSearchTerm))
                                {
                                    <button class="btn btn-outline-secondary border-start-0" 
                                            type="button" 
                                            @onclick="ClearSearch">
                                        <i class="bi bi-x"></i>
                                    </button>
                                }
                                </div>
                            </div>
                            
                            <div class="results-container">
                                @if (isSearching)
                                {
                                    <div class="search-feedback text-center p-3">
                                        <div class="spinner-border text-primary mb-2" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="text-muted mb-0">Searching equipment...</p>
                                    </div>
                                }
                                else if (equipmentSearchResults.Any())
                                {
                                    <p class="results-count small mb-2">Found @equipmentSearchResults.Count equipment items</p>
                                    <div class="equipment-search-results">
                                        @foreach (var equipment in equipmentSearchResults)
                                        {
                                            <div class="equipment-result-item @(selectedEquipmentNumber == equipment.EquipmentNumber ? "selected" : "")" 
                                                 @onclick="() => SelectEquipment(equipment.EquipmentNumber)">
                                                <div class="equipment-item-inner">
                                                    <div class="equipment-info">
                                                        <div class="equipment-primary">
                                                            @equipment.DeviceType @equipment.Brand
                                                        </div>
                                                        <div class="equipment-secondary">
                                                            <span>@(equipment.EquipmentNumber)</span>
                                                            <span>@equipment.Model</span>
                                                            <span>@equipment.SerialNumber</span>
                                                        </div>
                                                    </div>
                                                    @if (selectedEquipmentNumber == equipment.EquipmentNumber)
                                                    {
                                                        <div class="selected-indicator">
                                                            <i class="bi bi-check"></i>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(equipmentSearchTerm))
                                {
                                    <div class="empty-search-results p-3">
                                        <i class="bi bi-search large-icon"></i>
                                        <p class="empty-title">No matching equipment found</p>
                                        <p class="empty-message text-muted">Try different keywords or check the spelling</p>
                                        <button class="btn btn-outline-secondary mt-2" @onclick="ClearSearch">
                                            <i class="bi bi-arrow-counterclockwise me-1"></i>Clear search
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="initial-state p-3">
                                        <i class="bi bi-tools large-icon"></i>
                                        <p class="empty-title">Search for equipment</p>
                                        <p class="empty-message text-muted">Type in the search box above to find equipment</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="modal-footer py-2">
                            <div class="footer-hint small @(selectedEquipmentNumber == null ? "" : "d-none")">
                                <i class="bi bi-info-circle me-1"></i>
                                <span>Select an equipment item to continue</span>
                            </div>
                            <div class="button-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CloseEquipmentModal">
                                    <i class="bi bi-x me-1"></i>Cancel
                                </button>
                                <button type="button" 
                                        class="btn btn-sm btn-primary btn-assign" 
                                        @onclick="AssignSelectedEquipment"
                                        disabled="@(selectedEquipmentNumber == null)">
                                    <i class="bi bi-link me-1"></i>Assign
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        @if (ShowDeleteConfirmation)
        {
            <div class="modal-backdrop show"></div>
            <div class="modal d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Delete Confirmation</h5>
                            <button type="button" class="btn-close" @onclick="@(() => ShowDeleteConfirmation = false)" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this ticket? This action cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="@(() => ShowDeleteConfirmation = false)">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="DeleteTicket">Delete Ticket</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private Ticket? ticket;
    private bool ShowDeleteConfirmation { get; set; } = false;
    private string newComment = string.Empty;
    
    // Equipment-related properties
    private bool showEquipmentModal = false;
    private string equipmentSearchTerm = string.Empty;
    private List<Equipment> equipmentSearchResults = new();
    private int? selectedEquipmentNumber = null;
    private bool isSearching = false;
    private ElementReference searchInput;
    private ElementReference commentTextArea;

    private bool isCommentFocused = false;
    private bool showActionMenu = false;

    protected override async Task OnInitializedAsync()
    {
        ticket = await TicketService.GetTicketByIdAsync(Id);
    
        // If ticket has an equipment ID but the equipment object is null, load it
        if (ticket?.EquipmentNumber != null && ticket?.Equipment == null)
        {
            ticket.Equipment = await EquipmentService.GetEquipmentByNumberAsync(ticket.EquipmentNumber.Value);
        }
    }
    
    private void EditTicket()
    {
        // Will implement edit functionality later
        Navigation.NavigateTo($"/editticket/{ticket?.ID}");
    }
    
    private void OpenStatusModal()
    {
        // Will implement status update functionality later
    }
    
    private async Task DeleteTicket()
    {
        if (ticket != null)
        {
            await TicketService.DeleteTicketAsync(ticket.ID);
            ShowDeleteConfirmation = false;
            Navigation.NavigateTo("/tickets");
        }
    }
    
    private async Task AddComment()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newComment) || ticket == null)
                return;
                
            var comment = new Comment
            {
                ID = ticket.Comments?.Count > 0 ? ticket.Comments.Max(c => c.ID) + 1 : 1,
                Text = newComment.Trim(),
                Date = DateTime.Now,
                Author = "current.user@example.com"  // In a real app, get from authentication
            };
            
            // Initialize Comments collection if it's null
            if (ticket.Comments == null)
                ticket.Comments = new List<Comment>();
                
            ticket.Comments.Add(comment);
            
            // In a real app, you would save this to the backend
            await TicketService.UpdateTicketAsync(ticket);
            
            // Clear the input
            newComment = string.Empty;
            
            // Reset focus state first before interacting with JS
            isCommentFocused = false;
            
            // Force a UI update
            StateHasChanged();
            
            // Scroll to the new comment (wrapped in try-catch in case JS interop fails)
            try 
            {
                await JSRuntime.InvokeVoidAsync("scrollToElementById", "comment-" + comment.ID);
                await JSRuntime.InvokeVoidAsync("autoResizeTextarea", commentTextArea);
            }
            catch (Exception jsEx)
            {
                Console.WriteLine($"JS interop error: {jsEx.Message}");
                // Continue execution even if JS functions fail
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding comment: {ex.Message}");
            // Log the error or show a user-friendly message
        }
    }
    
    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.TotalDays > 1)
            return date.ToString("MMM d, h:mm tt");
        else if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        else if (timeSpan.TotalMinutes > 1)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        else
            return "just now";
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        
        return $"{size:0.##} {sizes[order]}";
    }

    private bool IsCurrentUser(string author)
    {
        // In a real app, compare with the current authenticated user
        return author == "current.user@example.com";
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "?";
            
        // If it's an email, use the first letter of the local part
        if (name.Contains('@'))
        {
            var localPart = name.Split('@')[0];
            return localPart.Substring(0, 1).ToUpper();
        }
        
        // For full names, take first letter of first and last name
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return (parts[0].Substring(0, 1) + parts[parts.Length - 1].Substring(0, 1)).ToUpper();
        else
            return name.Substring(0, 1).ToUpper();
    }

    private string FormatAuthorName(string author)
    {
        // If it's an email address, show just the local part
        if (author.Contains('@'))
        {
            var localPart = author.Split('@')[0];
            // Convert formats like 'john.doe' or 'john_doe' to 'John Doe'
            localPart = localPart.Replace('.', ' ').Replace('_', ' ');
            return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(localPart);
        }
        
        return author;
    }
    
    // Equipment-related methods
    private void OpenEquipmentModal()
    {
        showEquipmentModal = true;
        selectedEquipmentNumber = null;
        equipmentSearchTerm = string.Empty;
        equipmentSearchResults = new List<Equipment>();
        _ = SearchEquipment();
        
        // No need for JavaScript interop - the modal will handle focus when it appears
        StateHasChanged();
    }
    
    private void CloseEquipmentModal()
    {
        showEquipmentModal = false;
    }

    private async Task ClearSearch()
    {
        equipmentSearchTerm = string.Empty;
        equipmentSearchResults = new List<Equipment>();
        await SearchEquipment();
    }
    
    private async Task SearchEquipment()
    {
        isSearching = true;
        await Task.Delay(300); // Debounce
        equipmentSearchResults = await EquipmentService.SearchEquipmentAsync(equipmentSearchTerm);
        isSearching = false;
    }
    
    private void SelectEquipment(int id)
    {
        selectedEquipmentNumber = id;
    }
    
    private async Task AssignSelectedEquipment()
    {
        if (selectedEquipmentNumber == null || ticket == null) return;
        
        if (await TicketService.AssignEquipmentToTicketAsync(ticket.ID, selectedEquipmentNumber.Value))
        {
            // Refresh the equipment data
            var equipment = await EquipmentService.GetEquipmentByIdAsync(selectedEquipmentNumber.Value);
            ticket.EquipmentNumber = selectedEquipmentNumber.Value;
            ticket.Equipment = equipment;
            
            CloseEquipmentModal();
        }
    }
    
    private async Task RemoveEquipment()
    {
        if (ticket == null) return;
        
        if (await TicketService.RemoveEquipmentFromTicketAsync(ticket.ID))
        {
            ticket.EquipmentNumber = null;
            ticket.Equipment = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("autoResizeTextarea", commentTextArea);
            }
            catch (Exception)
            {
                // Handle any JS interop errors silently
            }
        }
    }
}