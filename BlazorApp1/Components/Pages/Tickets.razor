@page "/tickets"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ITicketService TicketService
@using BlazorApp1.Components.Ticket
@using BlazorApp1.Models
@using BlazorApp1.Services

<PageTitle>Tickets</PageTitle>

<div class="ticket-container">
    <!-- Sticky header group -->
    <div class="sticky-header-group">
        <!-- Search header -->
        <div class="search-header">
            <div class="search-bar">
                <i class="fas fa-search search-icon"></i>
                <input type="text" 
                       placeholder="Search Ticket Nbr, Title, Category, or Description" 
                       @bind="searchTerm"
                       @bind:event="oninput" />
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="clear-btn" @onclick="ClearSearch">
                        <i class="bi bi-x"></i>
                    </button>
                }
            </div>
        </div>

        <!-- Filter by category with divider and dropdown -->
        <div class="filter-container">
            <div class="filter-wrap">
                <!-- Left side: My and All buttons -->
                <div class="primary-filters">
                    <button class="filter-chip @(showMyTickets ? "active" : "")" 
                            @onclick="() => FilterMyTickets(true)">
                        My
                        <span>@GetMyTicketsCount()</span>
                    </button>
                    <button class="filter-chip @(!showMyTickets && selectedCategory == null ? "active" : "")" 
                            @onclick="() => FilterMyTickets(false)">
                        All
                        <span>@GetAllTicketsCount()</span>
                    </button>
                </div>
                
                <!-- Vertical divider -->
                <div class="filter-divider"></div>
                
                <!-- Right side: Category dropdown for mobile -->
                <div class="category-dropdown">
                    <button class="filter-chip @(selectedCategory != null ? "active-filter" : "")" 
                            @onclick="@(selectedCategory != null 
                                ? EventCallback.Factory.Create(this, (Action)ClearCategoryFilter) 
                                : EventCallback.Factory.Create(this, (Action)ToggleCategoryDropdown))" 
                            @onclick:preventDefault="true" 
                            @onclick:stopPropagation="true">
                        @(selectedCategory ?? "Categories") 
                        @if (selectedCategory != null)
                        {
                            <div class="chevron">
                                <i class="bi bi-x-circle"></i>
                            </div>
                        }
                        else
                        {
                            <div class="chevron">
                                <i class="bi bi-chevron-down"></i>
                            </div>
                            
                        }
                    </button>
                    
                    @if (showCategoryDropdown)
                    {
                        <div class="category-dropdown-menu" @onclick:stopPropagation="true">
                            <div class="dropdown-header">Filter by category</div>
                            <button class="dropdown-item @(selectedCategory == null ? "active" : "")" 
                                    @onclick="() => FilterByCategory(null)">
                                All Categories
                            </button>
                            @foreach (var category in GetUniqueCategories())
                            {
                                <button class="dropdown-item @(selectedCategory == category ? "active" : "")" 
                                        @onclick="() => FilterByCategory(category)">
                                    @category
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (tickets == null)
    {
        <!-- Skeleton loader for list items -->
        <div class="tickets-list">
            @for (int i = 0; i < 3; i++)
            {
                <div class="skeleton-ticket">
                    <div class="skeleton-line skeleton-id"></div>
                    <div class="skeleton-line skeleton-desc"></div>
                    <div class="skeleton-footer">
                        <div class="skeleton-line skeleton-ref"></div>
                        <div class="skeleton-line skeleton-status"></div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="tickets-list">
            @foreach (var ticket in FilteredAndSortedTickets)
            {
                <TicketComp Ticket="@ticket" OnTicketClick="NavigateToTicket" />
            }
            
            @if (!FilteredAndSortedTickets.Any())
            {
                <div class="empty-state">
                    <i class="fas fa-ticket-alt empty-icon"></i>
                    <p>No tickets found matching your criteria</p>
                </div>
            }
        </div>
    }

    <div class="action-buttons">
        <Btn Text="Create new Ticket" NavigateTo="/createTicket" />
    </div>
</div>

@code {
    private List<Ticket>? tickets;
    private string searchTerm = "";
    private string? selectedCategory = null;
    private bool showMyTickets = true;
    private bool showCategoryDropdown = false;
    private const string CurrentUserId = "current.user@example.com"; // In a real app, get from authentication
    
    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketService.GetAllTicketsAsync();
    }
    
    private IEnumerable<Ticket> FilteredAndSortedTickets 
    { 
        get
        {
            if (tickets == null)
                return Array.Empty<Ticket>();
                
            var filtered = tickets.AsEnumerable();
            
            // Filter by "My" tickets if selected
            if (showMyTickets)
            {
                filtered = filtered.Where(t => t.CreatedBy == CurrentUserId || t.AssignedTo == CurrentUserId);
            }
            
            // Apply category filter if selected
            if (!string.IsNullOrEmpty(selectedCategory))
            {
                filtered = filtered.Where(t => t.Category == selectedCategory);
            }
            
            // Apply search term if provided
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filtered = filtered.Where(t => 
                    (t.Header != null && t.Header.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) || 
                    (t.Details != null && t.Details.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) || 
                    (t.Category != null && t.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    t.GetFormattedID().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                );
            }
            
            // Order by date, newest first
            return filtered.OrderByDescending(t => t.Date);
        }
    }

    private int GetMyTicketsCount()
    {
        if (tickets == null) return 0;
            
        return tickets.Count(t => t.CreatedBy == CurrentUserId || t.AssignedTo == CurrentUserId);
    }

    private int GetAllTicketsCount()
    {
        return tickets?.Count ?? 0;
    }

    private void ClearSearch()
    {
        searchTerm = "";
    }
    
    private void FilterByCategory(string? category)
    {
        selectedCategory = category;
        showCategoryDropdown = false;
    }

    private void FilterMyTickets(bool myTicketsOnly)
    {
        showMyTickets = myTicketsOnly;
    }
    
    private void ToggleCategoryDropdown()
    {
        showCategoryDropdown = !showCategoryDropdown;
    }
    
    private void ClearCategoryFilter()
    {
        selectedCategory = null;
    }
    
    private async Task NavigateToTicket(int id)
    {
        Navigation.NavigateTo($"/tickets/{id}");
    }
    
    // Close dropdown when clicking outside
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "click", DotNetObjectReference.Create(this), "CloseDropdownOnClickOutside");
        }
    }
    
    [JSInvokable]
    public void CloseDropdownOnClickOutside()
    {
        if (showCategoryDropdown)
        {
            showCategoryDropdown = false;
            StateHasChanged();
        }
    }
    
    private IEnumerable<string> GetUniqueCategories()
    {
        return tickets?.Select(t => t.Category).Where(c => c != null).Distinct().Cast<string>() ?? Array.Empty<string>();
    }
}