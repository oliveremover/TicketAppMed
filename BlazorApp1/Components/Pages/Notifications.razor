@page "/notifications"
@inherits LayoutComponentBase
@rendermode InteractiveServer
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@using BlazorApp1.Models
@using BlazorApp1.Services
@using BlazorApp1.Components.StatusBadge
@using BlazorApp1.Components.Header

<PageTitle>Notifications</PageTitle>

<Header Title="Notifications" ShowBackButton="true" BackUrl="/">
    <ActionContent>
         @if (notifications?.Any(n => !n.IsRead) == true)
            {
                <button class="btn btn-sm btn-link" @onclick="MarkAllAsRead">Mark all as read</button>
            }
    </ActionContent>
</Header>
<div class="notifications-container">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (notifications?.Any() != true)
    {
        <div class="empty-state">
            <i class="bi bi-bell large-icon"></i>
            <p>No notifications yet</p>
            <span class="text-muted">You'll be notified when there are updates to your tickets</span>
        </div>
    }
    else
    {
        <div class="notifications-list">
            @foreach (var notification in notifications)
            {
                <div class="notification-item @(notification.IsRead ? "" : "unread")" @onclick="() => NavigateToTicket(notification)">
                    <div class="notification-avatar">
                        <div class="avatar-circle">
                            <span>@GetInitials(notification.Author)</span>
                        </div>
                    </div>
                    <div class="notification-content">
                        <div class="notification-header">
                            <span class="author">@FormatAuthorName(notification.Author)</span>
                            <span class="ticket-id">Ticket #@notification.TicketId.ToString().PadLeft(6, '0')</span>
                        </div>
                        <p class="message">@notification.Message</p>
                        <div class="notification-footer">
                            <span class="time">@GetRelativeTime(notification.Date)</span>
                            @if (!notification.IsRead)
                            {
                                <span class="badge bg-primary">New</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<NotificationItem> notifications;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotificationsAsync();
    }

    private async Task LoadNotificationsAsync()
    {
        try
        {
            isLoading = true;
            notifications = await NotificationService.GetNotificationsAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task NavigateToTicket(NotificationItem notification)
    {
        // Mark the notification as read when clicked
        if (!notification.IsRead)
        {
            await NotificationService.MarkAsReadAsync(notification.Id);
        }
        
        Navigation.NavigateTo($"/tickets/{notification.TicketId}");
    }

    private async Task MarkAllAsRead()
    {
        await NotificationService.MarkAllAsReadAsync();
        await LoadNotificationsAsync();
    }

    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.TotalDays > 30)
            return date.ToString("MMM d");
        else if (timeSpan.TotalDays > 1)
            return $"{(int)timeSpan.TotalDays}d ago";
        else if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        else if (timeSpan.TotalMinutes > 1)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        else
            return "just now";
    }

    private string FormatAuthorName(string author)
    {
        if (author.Contains('@'))
        {
            var parts = author.Split('@');
            var localPart = parts[0];
            localPart = localPart.Replace('.', ' ').Replace('_', ' ');
            return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(localPart);
        }
        
        return author;
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "?";
            
        if (name.Contains('@'))
        {
            name = name.Split('@')[0];
        }
            
        var parts = name.Split(new[] { '.', ' ', '_' }, StringSplitOptions.RemoveEmptyEntries);
        if (!parts.Any())
            return "?";
            
        if (parts.Length == 1)
            return parts[0].Substring(0, 1).ToUpper();
            
        return (parts[0].Substring(0, 1) + parts[parts.Length - 1].Substring(0, 1)).ToUpper();
    }
}